diff --git a/src/esmockLoader.mjs b/src/esmockLoader.mjs
index 5b8ec2b..4f0ae3a 100644
--- a/src/esmockLoader.mjs
+++ b/src/esmockLoader.mjs
@@ -24,6 +24,8 @@ const withHashRe = /[^#]*#/;
 const isesmRe = /isesm=true/;
 
 const resolve = async (specifier, context, nextResolve) => {
+  const DEBUG = specifier.includes('esmock-workspace-test');
+
   const { parentURL } = context;
   const [ esmockKeyParamSmall ] =
     (parentURL && parentURL.match(/\?esmk=\d*/)) || [];
@@ -33,6 +35,10 @@ const resolve = async (specifier, context, nextResolve) => {
   const [ esmockKeyParam ] =
     (esmockKeyLong && esmockKeyLong.match(esmockKeyRe) || []);
 
+  if (DEBUG) console.log('##### RESOLVE() ##', {
+    parentURL, esmockKeyLong, esmockKeyParamSmall, esmockKeyParam
+  });
+
   // new versions of node: when multiple loaders are used and context
   // is passed to nextResolve, the process crashes in a recursive call
   // see: /esmock/issues/#48
@@ -49,6 +55,10 @@ const resolve = async (specifier, context, nextResolve) => {
       ? await nextResolve(specifier, context)
       : await nextResolve(specifier));
 
+  if (DEBUG) console.log('##### RESOLVE() ##', {
+    parentURL, resolved
+  });
+
   if (!esmockKeyParam)
     return resolved;
 
@@ -63,7 +73,15 @@ const resolve = async (specifier, context, nextResolve) => {
   const moduleKeyGlobal = moduleKeyRe.test(moduleGlobals)
         && moduleGlobals.replace(moduleKeyRe, '$1');
 
+  if (DEBUG) console.log('##### RESOLVE() ##', {
+    parentURL, resolvedurl, moduleKeyRe, keyUrl, keys, moduleGlobals,
+    moduleKeyChild, moduleKeyGlobal
+  });
+
   const moduleKey = moduleKeyChild || moduleKeyGlobal;
+
+  if (DEBUG) console.log('##### RESOLVE() ##', { moduleKey });
+
   if (moduleKey) {
     resolved.url = isesmRe.test(moduleKey)
       ? moduleKey
@@ -74,13 +92,19 @@ const resolve = async (specifier, context, nextResolve) => {
     }
   }
 
+  if (DEBUG) console.log('##### RESOLVE() ##', { resolved });
+
   return resolved;
 };
 
 const load = async (url, context, nextLoad) => {
+  const DEBUG = url.includes('esmock-workspace-test');
+
   if (esmockModuleKeysRe.test(url)) // parent of mocked modules
     return nextLoad(url, context);
 
+  if (DEBUG) console.log('@@@@@ LOAD() @@', { url });
+
   url = url.replace(esmockGlobalsAndAfterRe, '');
   if (url.startsWith(urlDummy)) {
     url = url.replace(withHashRe, '');
@@ -88,8 +112,11 @@ const load = async (url, context, nextLoad) => {
 
   const exportedNames = exportNamesRe.test(url) &&
     url.replace(exportNamesRe, '$1').split(',');
+
+  if (DEBUG) console.log('@@@@@ LOAD() @@', { url, exportedNames });
+
   if (exportedNames.length) {
-    return {
+    const ret = {
       format : 'module',
       shortCircuit : true,
       responseURL : encodeURI(url),
@@ -98,6 +125,10 @@ const load = async (url, context, nextLoad) => {
         : `export const ${name} = global.esmockCacheGet("${url}").${name}`
       ).join('\n')
     };
+
+    if (DEBUG) console.log('@@@@@ LOAD() @@', ret);
+
+    return ret;
   }
 
   return nextLoad(url, context);
